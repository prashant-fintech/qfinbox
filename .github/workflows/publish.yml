name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - production

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build distribution packages
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  publish-test:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'test'
    needs: build
    runs-on: ubuntu-latest
    name: Publish to Test PyPI
    environment:
      name: test-pypi
      url: https://test.pypi.org/project/qfinbox/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        verbose: true

  publish-production:
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: build
    runs-on: ubuntu-latest
    name: Publish to PyPI
    environment:
      name: pypi
      url: https://pypi.org/project/qfinbox/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  create-github-release:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    needs: [build, publish-production]
    runs-on: ubuntu-latest
    name: Create GitHub Release
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from package
      id: get_version
      run: |
        python -c "
        import toml
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)
        version = data['project']['version']
        print(f'version={version}')
        " >> $GITHUB_OUTPUT

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes." >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Installation" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```bash' >> $GITHUB_OUTPUT
        echo "pip install qfinbox==${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        files: dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    if: always()
    needs: [build, publish-test, publish-production]
    runs-on: ubuntu-latest
    name: Notify deployment status
    steps:
    - name: Notify success
      if: needs.build.result == 'success' && (needs.publish-test.result == 'success' || needs.publish-production.result == 'success')
      run: |
        echo "✅ qfinbox successfully published!"

    - name: Notify failure
      if: needs.build.result == 'failure' || needs.publish-test.result == 'failure' || needs.publish-production.result == 'failure'
      run: |
        echo "❌ qfinbox publication failed!"
        exit 1
